[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kevin Valdivia",
    "section": "",
    "text": "I’m Kevin, an International Relations major at Pomona College, graduating in May 2026, with a focus on Latin America. Before college, I never imagined myself getting into data science or programming, but after taking a Political Statistics class in R, I discovered my passion for it. Now, I love working with R and am excited to continue developing my skills in Python. I am now interested in pursuing a career in data science.\nOn this site I keep a list of some of my projects."
  },
  {
    "objectID": "index.html#bio",
    "href": "index.html#bio",
    "title": "Kevin Valdivia",
    "section": "",
    "text": "I’m Kevin, an International Relations major at Pomona College, graduating in May 2026, with a focus on Latin America. Before college, I never imagined myself getting into data science or programming, but after taking a Political Statistics class in R, I discovered my passion for it. Now, I love working with R and am excited to continue developing my skills in Python. I am now interested in pursuing a career in data science.\nOn this site I keep a list of some of my projects."
  },
  {
    "objectID": "tidytuesday/school_income.html",
    "href": "tidytuesday/school_income.html",
    "title": "Interactive Data Vizualization (select to highlight)",
    "section": "",
    "text": "Under the mentorship of Professor Jo Hardin @hardin47 at Pomona College."
  },
  {
    "objectID": "tidytuesday/school_income.html#loading-relevant-libraries",
    "href": "tidytuesday/school_income.html#loading-relevant-libraries",
    "title": "Interactive Data Vizualization (select to highlight)",
    "section": "Loading relevant libraries",
    "text": "Loading relevant libraries\n\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(crosstalk) # For SharedData"
  },
  {
    "objectID": "tidytuesday/school_income.html#importation-of-the-data",
    "href": "tidytuesday/school_income.html#importation-of-the-data",
    "title": "Interactive Data Vizualization (select to highlight)",
    "section": "Importation of the data",
    "text": "Importation of the data\n\ncollege_admissions &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-10/college_admissions.csv')\n\n\n\n\n\n\n\nDisclaimer\n\n\n\nThe documentation of the dataset was highly complicated and technical and hence I don’t understand how to interpret the datset. Instead I used the graph to learn more about how to make a interactive graph. Specifically how to select a line on a graph. There are many institutions on the graph so it is not the best example, but the code works."
  },
  {
    "objectID": "tidytuesday/school_income.html#setting-up-interactive-graph",
    "href": "tidytuesday/school_income.html#setting-up-interactive-graph",
    "title": "Interactive Data Vizualization (select to highlight)",
    "section": "Setting up interactive graph",
    "text": "Setting up interactive graph\n\n\n\n\n\n\nPlotly & Crosstalk::SharedData\n\n\n\nThe SharedData function hass to be used in this way for the plotly to work.\n\n\n\n# Some Data prep so that public and private categroization looks good on the graph\ncollege_admissions &lt;- college_admissions |&gt;\n  mutate(public_name = ifelse(public == TRUE, \"Public Uni\", \"Private Uni\"))\n\n# Indispensable setup for plotly\ndata_w_crosstalk &lt;- crosstalk::SharedData$new(college_admissions, ~name)"
  },
  {
    "objectID": "tidytuesday/school_income.html#interactive-graph-that-can-highlight-a-line-when-selected",
    "href": "tidytuesday/school_income.html#interactive-graph-that-can-highlight-a-line-when-selected",
    "title": "Interactive Data Vizualization (select to highlight)",
    "section": "Interactive graph that can highlight a line when selected",
    "text": "Interactive graph that can highlight a line when selected\nFirst we need to make the ggplot look how we want it to look.\n\nplot_setup &lt;- data_w_crosstalk |&gt; \n  ggplot(aes(x = par_income_bin, y = attend, color = public_name,\n             text = paste0(\"School: \", name))) +\n  geom_point() +\n  geom_line() +\n  facet_grid(~ public_name) +\n    scale_color_manual(values = c(\"Public Uni\" = \"blue\", \"Private Uni\" = \"red\")) +  # Custom colors\n  guides(color = \"none\") + # How to not make the color and public/private appear\n  labs(x = \"Parental Income Bin\",\n       y = \"Something about % Attendence\",\n       title = \"Plot Comparing Elite Schools and Student Income Status\")"
  },
  {
    "objectID": "projects/p2_text_anlaysis/p2_text_analysis.html",
    "href": "projects/p2_text_anlaysis/p2_text_analysis.html",
    "title": "The Office - Text Analysis Project",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "projects/p2_text_anlaysis/p2_text_analysis.html#loading-the-dataset",
    "href": "projects/p2_text_anlaysis/p2_text_analysis.html#loading-the-dataset",
    "title": "The Office - Text Analysis Project",
    "section": "Loading the Dataset",
    "text": "Loading the Dataset\n\noffice &lt;- read.csv(\"the-office_lines.csv\")\ncolnames(office)\n\n[1] \"X\"              \"Character\"      \"Line\"           \"Season\"        \n[5] \"Episode_Number\"\n\n\n\nDataset Manipulation For Graphing Main 4 Characters Overtime\n\nmain_4_mentions &lt;- office |&gt; \n  mutate(Jim = ifelse(str_detect(Line, \"(?i)jim\"), 1, 0)) |&gt; \n  mutate(Pam = ifelse(str_detect(Line, \"(?i)pam\"), 1, 0)) |&gt; \n  mutate(Michael = ifelse(str_detect(Line, \"(?i)michael\"), 1, 0)) |&gt; \n  mutate(Dwight = ifelse(str_detect(Line, \"(?i)dwight\"), 1, 0)) |&gt; \n  arrange(Season, Episode_Number) |&gt; \n  group_by(Season, Episode_Number) |&gt; \n  summarize(Jim = sum(Jim),\n            Pam = sum(Pam),\n            Michael = sum(Michael),\n            Dwight = sum(Dwight)) |&gt; \n  ungroup() |&gt; \n  mutate(season_episode_num = row_number()) |&gt; \n  mutate(season_episode = ifelse(Episode_Number == 1, str_c(\"S\", Season), \"\")) |&gt; \n  select(Jim:season_episode) |&gt; \n  pivot_longer(cols = Jim:Dwight,\n               names_to = \"character\",\n               values_to = \"count\")\nmain_4_mentions\n\n# A tibble: 736 × 4\n   season_episode_num season_episode character count\n                &lt;int&gt; &lt;chr&gt;          &lt;chr&gt;     &lt;dbl&gt;\n 1                  1 \"S1\"           Jim           7\n 2                  1 \"S1\"           Pam          17\n 3                  1 \"S1\"           Michael       7\n 4                  1 \"S1\"           Dwight        8\n 5                  2 \"\"             Jim           6\n 6                  2 \"\"             Pam           4\n 7                  2 \"\"             Michael      15\n 8                  2 \"\"             Dwight       10\n 9                  3 \"\"             Jim          17\n10                  3 \"\"             Pam          10\n# ℹ 726 more rows"
  },
  {
    "objectID": "projects/p2_text_anlaysis/p2_text_analysis.html#graph-of-the-main-four-characters-overtime",
    "href": "projects/p2_text_anlaysis/p2_text_analysis.html#graph-of-the-main-four-characters-overtime",
    "title": "The Office - Text Analysis Project",
    "section": "Graph of the main four characters overtime",
    "text": "Graph of the main four characters overtime\n\nmain_4_mentions |&gt; \n  ggplot(aes(x = season_episode_num, y = count, color = character)) +\n  geom_smooth(se = FALSE) +\n  labs(x = \"Season\",\n        y = \"Count\",\n        color = \"Character\") +\n  scale_x_continuous( breaks = main_4_mentions$season_episode_num,\n                      labels = main_4_mentions$season_episode,\n                      #minor_breaks = NULL      # Remove minor ticks\n                      ) +\n  scale_color_manual(values = c(\"Pam\" = \"#FF6F61\",\n                                \"Jim\" = \"#007B7F\",\n                                \"Dwight\" = \"#7D3C98\",\n                                \"Michael\" = \"#DAA520\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\ncorporate &lt;- office |&gt; \n  mutate(corporate = ifelse(str_detect(Line, \"(?i)corporate\"), 1, 0))\n\ncorporate |&gt; \n  group_by(Character) |&gt;\n  summarize(corporate = sum(corporate)) |&gt; \n  arrange(desc(corporate)) |&gt; \n  slice_head(n = 5)\n\n# A tibble: 5 × 2\n  Character corporate\n  &lt;chr&gt;         &lt;dbl&gt;\n1 Michael          61\n2 Dwight           17\n3 Gabe             11\n4 Pam               9\n5 Jim               8\n\n\n\nmain_characters &lt;- c(\"Michael\", \"Jim\", \"Pam\", \"Dwight\", \"Ryan\", \"Angela\", \n                \"Andy\", \"Stanley\", \"Phyllis\", \"Kelly\", \"Toby\", \n                \"Kevin\", \"Oscar\", \"Creed\", \"Meredith\")\n\nontask &lt;- office |&gt; \n  filter(Character %in% main_characters) |&gt; \n  mutate(on_task = case_when(\n    str_detect(Line, \"(?i)(Sales call|Close the deal|Client meeting|Team building|Sales quota|Dunder Mifflin|Paper company|File|Report|Workplace safety|Expense report|Business trip|Client relations|Company policy|Human resources|Submit a proposal|Meet the deadline|Job performance|Close a sale|Office supplies|Sales pitch|Productivity report|Employee evaluation|Quarterly review|Manager meeting|Sales team|Sales numbers|Work email|Conference call|Work-life balance|Overtime|Office hours|Weekly meeting|Promotion|Sales report|Job interview|Submit the paperwork|Company-wide memo|Business strategy|Client presentation|Office party|Budget meeting|New hire|Work project|Revenue target|Annual review|Management decision|Employee training|Company retreat|Work performance)\") ~ 1,\n    TRUE ~ 0)) |&gt; \n  group_by(Character) |&gt; \n  summarise(prop = sum(on_task)/n())\n\n\npallete &lt;- c(\"Pam\" = \"#FF6F61\",      # Coral\n              \"Jim\" = \"#007B7F\",      # Teal\n                                \"Dwight\" = \"#7D3C98\",   # Purple\n                                \"Michael\" = \"#DAA520\",  # Goldenrod\n                                \"Angela\" = \"#F1C40F\",   # Bright Yellow\n                                \"Stanley\" = \"#E74C3C\",   # Bright Red\n                                \"Phyllis\" = \"#3498DB\",   # Bright Blue\n                                \"Ryan\" = \"#9B59B6\",      # Lavender\n                                \"Toby\" = \"#2ECC71\",      # Bright Green\n                                \"Kelly\" = \"#E67E22\"      # Bright Orange\n)\n\nontask |&gt; \n  ggplot(aes(x = reorder(Character, prop), y = prop, color = Character)) +\n  geom_col() +\n  coord_flip() +\n  scale_fill_manual(values = pallete) +\n  theme_minimal()"
  },
  {
    "objectID": "projects/p2_text_anlaysis/office_text_analysis.html",
    "href": "projects/p2_text_anlaysis/office_text_analysis.html",
    "title": "The Office - Text Analysis Project",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "projects/p2_text_anlaysis/office_text_analysis.html#loading-the-dataset",
    "href": "projects/p2_text_anlaysis/office_text_analysis.html#loading-the-dataset",
    "title": "The Office - Text Analysis Project",
    "section": "Loading the Dataset",
    "text": "Loading the Dataset\n\noffice &lt;- read.csv(\"the-office_lines.csv\")\ncolnames(office)\n\n[1] \"X\"              \"Character\"      \"Line\"           \"Season\"        \n[5] \"Episode_Number\"\n\n\n\nDataset Manipulation For Graphing Main 4 Characters Overtime\n\nmain_4_mentions &lt;- office |&gt; \n  mutate(Jim = ifelse(str_detect(Line, \"(?i)jim\"), 1, 0)) |&gt; \n  mutate(Pam = ifelse(str_detect(Line, \"(?i)pam\"), 1, 0)) |&gt; \n  mutate(Michael = ifelse(str_detect(Line, \"(?i)michael\"), 1, 0)) |&gt; \n  mutate(Dwight = ifelse(str_detect(Line, \"(?i)dwight\"), 1, 0)) |&gt; \n  arrange(Season, Episode_Number) |&gt; \n  group_by(Season, Episode_Number) |&gt; \n  summarize(Jim = sum(Jim),\n            Pam = sum(Pam),\n            Michael = sum(Michael),\n            Dwight = sum(Dwight)) |&gt; \n  ungroup() |&gt; \n  mutate(season_episode_num = row_number()) |&gt; \n  mutate(season_episode = ifelse(Episode_Number == 1, str_c(\"S\", Season), \"\")) |&gt; \n  select(Jim:season_episode) |&gt; \n  pivot_longer(cols = Jim:Dwight,\n               names_to = \"character\",\n               values_to = \"count\")\nmain_4_mentions\n\n# A tibble: 736 × 4\n   season_episode_num season_episode character count\n                &lt;int&gt; &lt;chr&gt;          &lt;chr&gt;     &lt;dbl&gt;\n 1                  1 \"S1\"           Jim           7\n 2                  1 \"S1\"           Pam          17\n 3                  1 \"S1\"           Michael       7\n 4                  1 \"S1\"           Dwight        8\n 5                  2 \"\"             Jim           6\n 6                  2 \"\"             Pam           4\n 7                  2 \"\"             Michael      15\n 8                  2 \"\"             Dwight       10\n 9                  3 \"\"             Jim          17\n10                  3 \"\"             Pam          10\n# ℹ 726 more rows"
  },
  {
    "objectID": "projects/p2_text_anlaysis/office_text_analysis.html#graph-of-the-main-four-characters-overtime",
    "href": "projects/p2_text_anlaysis/office_text_analysis.html#graph-of-the-main-four-characters-overtime",
    "title": "The Office - Text Analysis Project",
    "section": "Graph of the main four characters overtime",
    "text": "Graph of the main four characters overtime\n\nmain_4_mentions |&gt; \n  ggplot(aes(x = season_episode_num, y = count, color = character)) +\n  geom_smooth(se = FALSE) +\n  labs(x = \"Season\",\n        y = \"Count\",\n        color = \"Character\") +\n  scale_x_continuous( breaks = main_4_mentions$season_episode_num,\n                      labels = main_4_mentions$season_episode,\n                      #minor_breaks = NULL      # Remove minor ticks\n                      ) +\n  scale_color_manual(values = c(\"Pam\" = \"#FF6F61\",\n                                \"Jim\" = \"#007B7F\",\n                                \"Dwight\" = \"#7D3C98\",\n                                \"Michael\" = \"#DAA520\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\ncorporate &lt;- office |&gt; \n  mutate(corporate = ifelse(str_detect(Line, \"(?i)corporate\"), 1, 0))\n\ncorporate |&gt; \n  group_by(Character) |&gt;\n  summarize(corporate = sum(corporate)) |&gt; \n  arrange(desc(corporate)) |&gt; \n  slice_head(n = 5)\n\n# A tibble: 5 × 2\n  Character corporate\n  &lt;chr&gt;         &lt;dbl&gt;\n1 Michael          61\n2 Dwight           17\n3 Gabe             11\n4 Pam               9\n5 Jim               8\n\n\n\nmain_characters &lt;- c(\"Michael\", \"Jim\", \"Pam\", \"Dwight\", \"Ryan\", \"Angela\", \n                \"Andy\", \"Stanley\", \"Phyllis\", \"Kelly\", \"Toby\", \n                \"Kevin\", \"Oscar\", \"Creed\", \"Meredith\")\n\nontask &lt;- office |&gt; \n  filter(Character %in% main_characters) |&gt; \n  mutate(on_task = case_when(\n    str_detect(Line, \"(?i)(Sales call|Close the deal|Client meeting|Team building|Sales quota|Dunder Mifflin|Paper company|File|Report|Workplace safety|Expense report|Business trip|Client relations|Company policy|Human resources|Submit a proposal|Meet the deadline|Job performance|Close a sale|Office supplies|Sales pitch|Productivity report|Employee evaluation|Quarterly review|Manager meeting|Sales team|Sales numbers|Work email|Conference call|Work-life balance|Overtime|Office hours|Weekly meeting|Promotion|Sales report|Job interview|Submit the paperwork|Company-wide memo|Business strategy|Client presentation|Office party|Budget meeting|New hire|Work project|Revenue target|Annual review|Management decision|Employee training|Company retreat|Work performance)\") ~ 1,\n    TRUE ~ 0)) |&gt; \n  group_by(Character) |&gt; \n  summarise(prop = sum(on_task)/n())\n\n\npalette &lt;- c(\"Michael\" = \"#7FB3D5\", \"Jim\" = \"#8B8B8B\", \"Pam\" = \"#FF8DAA\", \n             \"Dwight\" = \"#FFD700\", \"Ryan\" = \"#28A745\", \"Angela\" = \"#5B2C6F\", \n             \"Andy\" = \"#FF6F61\", \"Stanley\" = \"#5C3A1D\", \"Phyllis\" = \"#A0522D\", \n             \"Kelly\" = \"#FF1493\", \"Toby\" = \"#4A90E2\", \"Kevin\" = \"#FFA500\", \n             \"Oscar\" = \"#1E4D2B\", \"Creed\" = \"#C0C0C0\", \"Meredith\" = \"#A50000\")\n\n\n\nontask |&gt; \n  ggplot(aes(x = reorder(Character, prop), y = prop, fill = Character)) +\n  geom_col(show.legend = FALSE) +\n  coord_flip() +\n  scale_fill_manual(values = palette) +\n  theme_minimal() +\n  labs(y = \"Percentage\",\n       x = \"Character\",\n       title = \"Percentage of Work Related Lines By Character From 'The Office'\")"
  },
  {
    "objectID": "practice/ggplot_practice.html",
    "href": "practice/ggplot_practice.html",
    "title": "ggplot Practice For Review",
    "section": "",
    "text": "Some ggplot examples based on plots submitted as HW. Directed by Professor Jo Hardin"
  },
  {
    "objectID": "practice/ggplot_practice.html#putting-a-label-next-to-a-specific-data-point",
    "href": "practice/ggplot_practice.html#putting-a-label-next-to-a-specific-data-point",
    "title": "ggplot Practice For Review",
    "section": "Putting a label next to a specific data point",
    "text": "Putting a label next to a specific data point\n\nggplot(midwest, aes(x = percollege, y = percbelowpoverty)) +\n  geom_point(aes(color = state)) + #, shape = state)) +\n  geom_text(aes(label = ifelse((percollege &gt;= 30) & (percbelowpoverty &gt;= 20), county, \"\")), vjust = -1, hjust = 0.5, color = \"red\") +\n  labs(x = \"Percentage of College Grads\", \n       y = \"Percentage below the Poverty Line\",        \n       title = \"Counties with College Grads and Below the Poverty Line\",\n       subtitle = \"% of college graduate to % below the poverty line in midwestern counties\",\n       color = \"State\",\n       shape = \"State\"\n       )"
  },
  {
    "objectID": "practice/ggplot_practice.html#plot-with-facet-wrap-geom_smooth",
    "href": "practice/ggplot_practice.html#plot-with-facet-wrap-geom_smooth",
    "title": "ggplot Practice For Review",
    "section": "Plot with facet wrap & geom_smooth",
    "text": "Plot with facet wrap & geom_smooth\n\n\n\n\n\n\nNote\n\n\n\nse = FALSE removes the confidence bands around the line. These bands show the uncertainty around the smooth curve. We’ll discuss uncertainty around estimates later in the course and bring these bands back then.\n\n\n\nggplot(midwest, aes(x = percollege, y = percbelowpoverty, \n           color = state, shape = state)) +\n  geom_point() +\n  geom_smooth(se = FALSE) +\n  facet_wrap(~ state) +\n  labs(x = \"Percentage of College Graduates\",\n       y = \"Percentage Below the Poverty Line\",\n       title = \"Counties with College Grads and Below the Poverty Line\",\n       subtitle = \"% of college graduate to % below the poverty line in midwestern counties\",\n       color = \"State\",\n       shape = \"State\")"
  },
  {
    "objectID": "practice/ggplot_practice.html#creating-a-box-plot---changing-the-name-of-the-values---adding-a-label-to-a-datapoint",
    "href": "practice/ggplot_practice.html#creating-a-box-plot---changing-the-name-of-the-values---adding-a-label-to-a-datapoint",
    "title": "ggplot Practice For Review",
    "section": "Creating a box plot - Changing the name of the values - Adding a label to a datapoint",
    "text": "Creating a box plot - Changing the name of the values - Adding a label to a datapoint\n\nggplot(midwest, aes(x = ifelse(state == \"IL\", \"Illinois\", \n                        ifelse(state == \"IN\", \"Indianapolis\", \n                        ifelse(state == \"MI\", \"Minesota\", \n                        ifelse(state == \"OH\", \"Ohio\", \"Wisconsin\")))), \n                    y = area)) +\n  geom_boxplot(aes(fill = state), show.legend = FALSE) + \n  geom_text(aes(label = ifelse((area &gt; 0.09) & (state == \"MI\"), county, \"\")), \n            color = \"darkgreen\",\n            vjust = 1, hjust = -0.1) +\n  labs(x = \"State\",\n       y = \"County Area\",\n       title = \"Box Plot's of Midwestern Counties Land Area\")"
  },
  {
    "objectID": "practice/ggplot_practice.html#proportion-bar-graph-with-parameter-position-fill",
    "href": "practice/ggplot_practice.html#proportion-bar-graph-with-parameter-position-fill",
    "title": "ggplot Practice For Review",
    "section": "Proportion bar graph with parameter: position = “fill”",
    "text": "Proportion bar graph with parameter: position = “fill”\n\n\n\n\n\n\nNote\n\n\n\nThe fill must be a categorical variable.\n\n\n\nmidwest &lt;- midwest |&gt;\n  mutate(metro = if_else(inmetro == 1, \"Yes\", \"No\"))\n\n\nggplot(midwest, aes(x = state, fill = metro)) +\n  geom_bar(position = \"fill\") +\n  labs(x = \"State\",\n       y = \"Proportion\",\n       fill = \"Metro\",\n       title = \"Proportion of Counties that are Metro Areas by State\") +\n  scale_fill_manual(values = c(\"Yes\" = \"darkblue\", \"No\" = \"darkred\"))"
  },
  {
    "objectID": "practice/ggplot_practice.html#geom_point-fact_wrap-and-alpha-parameter",
    "href": "practice/ggplot_practice.html#geom_point-fact_wrap-and-alpha-parameter",
    "title": "ggplot Practice For Review",
    "section": "geom_point, fact_wrap, and alpha parameter",
    "text": "geom_point, fact_wrap, and alpha parameter\n::: callout-tip ## Hint - The ggplot2 reference for themes will be helpful in determining the theme. - The size of the points is 2. - The transparency (alpha) of the points is 0.5. - You can put line breaks in labels with \\n. :::\n\nggplot(midwest, aes(percollege, percbelowpoverty, color = percwhite)) +\n  geom_point(size = 2, alpha = 0.5) +\n  facet_wrap(~ state) +\n  theme_minimal() +\n  labs(x = \"% college educated\",\n       y = \"% below poverty line\",\n       title = \"College Education and Population Under Poverty Line \",\n       subtitle = \"For Counties in the Midwest by States\",\n       color = \"% white\")"
  },
  {
    "objectID": "tidytuesday/chess_matches.html",
    "href": "tidytuesday/chess_matches.html",
    "title": "Understanding Chess Match Dataset",
    "section": "",
    "text": "Under the mentorship of Professor Jo Hardin @hardin47 at Pomona College"
  },
  {
    "objectID": "tidytuesday/chess_matches.html#packages",
    "href": "tidytuesday/chess_matches.html#packages",
    "title": "Understanding Chess Match Dataset",
    "section": "Packages",
    "text": "Packages\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "tidytuesday/chess_matches.html#loading-chess-dataset",
    "href": "tidytuesday/chess_matches.html#loading-chess-dataset",
    "title": "Understanding Chess Match Dataset",
    "section": "Loading Chess Dataset",
    "text": "Loading Chess Dataset\nThe chess dataset this week comes from Lichess.org via Kaggle/Mitchell J.\nThe data will also be cleaned during importation, removing all detailed information about the type of opening and leaving only broader categories of data to allow for data aggregation.\n\nchess &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-10-01/chess.csv') |&gt; \n  mutate(opening_main = case_when(\n    str_detect(opening_name, \":\") ~ str_extract(opening_name, \".+?(?=:)\"),\n    str_detect(opening_name, \"\\\\|\") ~ str_extract(opening_name, \".+?(?= \\\\|)\"),\n    str_detect(opening_name, \"#\") ~ str_extract(opening_name, \".+?(?= #)\"),\n    TRUE ~ opening_name)) |&gt; \n  mutate(num_moves = str_count(moves, \"\\\\S+\"))"
  },
  {
    "objectID": "tidytuesday/chess_matches.html#collapsig-data",
    "href": "tidytuesday/chess_matches.html#collapsig-data",
    "title": "Understanding Chess Match Dataset",
    "section": "Collapsig Data",
    "text": "Collapsig Data\nWe collapse the data by grouping by opening type and filtering for more than 500 observations with this opening.\n\ntop_open &lt;- chess |&gt;  \n  group_by(opening_main) |&gt; \n  summarize(open_count = n(),\n            open_prop = open_count / nrow(chess)) |&gt; \n  arrange(desc(open_count)) |&gt; \n  filter(open_count &gt; 500) |&gt; \n  select(opening_main) |&gt; \n  pull()\n\ntop_open\n\n [1] \"Sicilian Defense\"     \"French Defense\"       \"Queen's Pawn Game\"   \n [4] \"Italian Game\"         \"King's Pawn Game\"     \"Ruy Lopez\"           \n [7] \"English Opening\"      \"Scandinavian Defense\" \"Philidor Defense\"    \n[10] \"Caro-Kann Defense\"   \n\nchess_top &lt;- chess |&gt; \n  filter(opening_main %in% top_open)"
  },
  {
    "objectID": "tidytuesday/chess_matches.html#plotting",
    "href": "tidytuesday/chess_matches.html#plotting",
    "title": "Understanding Chess Match Dataset",
    "section": "Plotting",
    "text": "Plotting\n\nOutcomes based on opening used\nThe following shows the proportion for the winner of the gram depending on what type of opening was used. Only the most popular openings are shown.\n\nchess_top |&gt; \n  mutate(winner = case_when(\n    winner == \"white\" ~ \"Opener\",\n    winner == \"black\" ~ \"Follower\",\n    winner == \"draw\" ~ \"Draw\")) |&gt; \n  mutate(winner = factor(winner, levels = c(\"Follower\", \"Draw\", \"Opener\"))) |&gt; \n  ggplot(aes(x = opening_main, fill = winner)) +\n  geom_bar(position = \"fill\") +\n  # Tilting the text\n  #theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 0.5)) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(x = \"Proportion\",\n      y = \"Opening\",\n      fill = \"Winner\",\n      title = \"Type Opening With Outcome Proportion\")\n\n\n\n\n\n\n\n\n###Exploring links with player rating We plot player ratings and color the observations by the type of opening. One observationis that the Sicilian openign tends to be used between higher rated player matches and the King’s Pawn game is used in lower rated player matches.\n\nchess_top |&gt; \n  ggplot(aes(x = white_rating, y = black_rating, color = opening_main)) +\n  geom_point() +\n  scale_color_brewer(palette = \"Spectral\") +\n  labs(x = \"White Rating\", \n       y = \"Black Rating\", \n       color = \"Opening\",\n       title = \"Player Rating and Type of Opening\")"
  },
  {
    "objectID": "tidytuesday/chess_matches.html#model",
    "href": "tidytuesday/chess_matches.html#model",
    "title": "Understanding Chess Match Dataset",
    "section": "Model",
    "text": "Model\nWe make a basic model predicting whether the opening will be Sicilian in a particular game. The results are below.\n\nchess &lt;- chess |&gt; \n  mutate(sicilian = ifelse(opening_main == \"Sicilian Defense\", 1, 0))\n\nglm(sicilian ~ black_rating + num_moves, data = chess, family = binomial) |&gt; \n  broom::augment(type.predict = \"response\")\n\n# A tibble: 20,058 × 9\n   sicilian black_rating num_moves .fitted .resid      .hat .sigma    .cooksd\n      &lt;dbl&gt;        &lt;dbl&gt;     &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1        0         1191        13  0.0754 -0.396 0.000161   0.872 0.00000437\n 2        0         1261        16  0.0823 -0.415 0.000146   0.872 0.00000436\n 3        0         1500        61  0.113  -0.489 0.0000597  0.872 0.00000252\n 4        0         1454        61  0.107  -0.475 0.0000657  0.872 0.00000261\n 5        0         1469        95  0.110  -0.484 0.000114   0.872 0.00000472\n 6        1         1002         5  0.0593  2.38  0.000200   0.871 0.00106   \n 7        0         1423        33  0.101  -0.462 0.0000922  0.872 0.00000346\n 8        0         2108         9  0.217  -0.700 0.000487   0.872 0.0000451 \n 9        0         1392        66  0.0991 -0.457 0.0000779  0.872 0.00000286\n10        0         1209       119  0.0815 -0.412 0.000237   0.872 0.00000702\n# ℹ 20,048 more rows\n# ℹ 1 more variable: .std.resid &lt;dbl&gt;"
  },
  {
    "objectID": "tidytuesday/chess_matches.html#graphing-the-model",
    "href": "tidytuesday/chess_matches.html#graphing-the-model",
    "title": "Understanding Chess Match Dataset",
    "section": "Graphing the model",
    "text": "Graphing the model\nA model with more predictive power would have a dark shaded region on the bottom left and another on the top right of the graph. We do not find this in the graph below so we can say that this model is not capturing the likelihood of Sicilian opening taking place.\n\nglm(sicilian ~ black_rating + white_rating + num_moves + rated, \n    data = chess, family = \"binomial\") |&gt; \n  broom::augment(type.predict = \"response\") |&gt; \n  ggplot(aes(x = .fitted, y = sicilian)) + \n  geom_point(alpha = 0.1)"
  },
  {
    "objectID": "projects/amlo_mex/amlo_page.html",
    "href": "projects/amlo_mex/amlo_page.html",
    "title": "Project Under Development",
    "section": "",
    "text": "# Libraries used\nlibrary(tidyverse)\nlibrary(ggparliament)\nlibrary(gganimate)\n\n\nparty_order &lt;- list(\n  \"PT\",          # Far-left\n  \"MORENA\",      # Left\n  \"VERDE\",       # Center-left\n  \"MC\",          # Center to Center-left\n  \"PRD\",         # Center-left\n  \"PRI\",         # Center-right\n  \"PAN\",         # Right\n  \"PES\",         # Far-right\n  \"Other_Parties\" # Other/Unknown\n)\n\nparty_colors &lt;- list(\n  PT = \"#f02b19\",           # Red\n  MORENA = \"#b5261f\",       # Dark Red\n  VERDE = \"#38a700\",        # Green\n  MC = \"#f57c00\",           # Orange\n  PRD = \"#ffcc00\",          # Yellow\n  PRI = \"#006847\",          # Green (plus Red/White in their logo)\n  PAN = \"#004a98\",          # Blue\n  PES = \"#5c246e\",          # Purple\n  Other_Parties = \"#b2b2b2\" # Grey for other/unknown parties\n)\n\n\ncoalition_colors &lt;- list(\n  PT = \"#a41e34\",           # Red\n  MORENA = \"#b5261f\",       # Dark Red\n  VERDE = \"#a41e34\",        # Green\n  MC = \"#f57c00\",           # Orange\n  PRD = \"#ec4891\",          # Yellow\n  PRI = \"#ec4891\",          # Green (plus Red/White in their logo)\n  PAN = \"#ec4891\",          # Blue\n  PES = \"#5c246e\",          # Purple\n  Other_Parties = \"#b2b2b2\" # Grey for other/unknown parties\n)\n\n\ndeputies &lt;- read.csv(\"deputies_00_24.csv\") |&gt; \n  mutate(party = factor(party, levels = party_order)) |&gt; \n  arrange(party) |&gt; \n  filter(year == 2024) |&gt; \n  rename(seats = elected) |&gt; \n  select(-year) |&gt; \n  mutate(coalition = case_when(party %in% c(\"MORENA\", \"PT\", \"VERDE\") ~ \"morenacoal\",\n                               party %in% c(\"PRD\", \"PRI\") ~ \"fcpmx\",\n                               TRUE ~ party))\n\n\n# Use ggparliament's data structure to prepare the parliament plot\nmex_par_data &lt;- parliament_data(\n  election_data = deputies,\n  type = \"semicircle\",  # This sets the semicircular layout\n  parl_rows = 10        # Number of rows in the semicircle (adjust this based on number of seats)\n)\n\n\n# The above fig dimensions were changed to avoid narrowing of the graph\nmex_par_data |&gt; \n  ggplot(aes(x = x, y = y)) +\n    geom_parliament_seats(size = 6, aes(color = party)) + \n    scale_colour_manual(values = party_colors) + \n    theme_void() + \n    theme(legend.position = \"null\") +\n    labs(title = \"Deptuies Elected in the 2025 Mexican Election by Party\") \n\n\n\n\n\n\n\n\n\ndeputies &lt;- read.csv(\"deputies_00_24.csv\") %&gt;%\n  mutate(party = factor(party, levels = party_order),\n         year = factor(year)) %&gt;%  # Convert year to a factor\n  arrange(party) %&gt;%\n  rename(seats = elected)\n\n\n# Create a function to prepare data for each year\nprepare_parliament_data &lt;- function(year_data) {\n  parliament_data(\n    election_data = year_data,\n    type = \"semicircle\",  # This sets the semicircular layout\n    parl_rows = 10        # Number of rows in the semicircle\n  )\n}\n\n# Specify a custom temporary directory\ntemp_dir &lt;- tempdir()\n\n# Create animated parliament plot\ndeputies %&gt;%\n  group_by(year) %&gt;%\n  nest() %&gt;%\n  mutate(par_data = map(data, prepare_parliament_data)) %&gt;%\n  unnest(par_data) %&gt;%\n  ggplot(aes(x = x, y = y)) +\n  geom_parliament_seats(size = 6, aes(color = party)) + \n  scale_colour_manual(values = party_colors) + \n  theme_void() + \n  theme(legend.position = \"null\") +\n  labs(title = \"Deputies Elected in the Mexican Election by Party ({frame_time})\") +\n  transition_time(year)  # Now will only show specified years\n\nanimate(animated_plot, renderer = gifski_renderer(temp_dir))"
  },
  {
    "objectID": "tidytuesday/shakespeare_words.html",
    "href": "tidytuesday/shakespeare_words.html",
    "title": "Creating a Word Map With Custom Shapes",
    "section": "",
    "text": "Under the mentorship of Professor Jo Hardin @hardin47 at Pomona College. Analysis based on @deepdk"
  },
  {
    "objectID": "tidytuesday/shakespeare_words.html#loading-relevant-libraries",
    "href": "tidytuesday/shakespeare_words.html#loading-relevant-libraries",
    "title": "Creating a Word Map With Custom Shapes",
    "section": "Loading relevant libraries",
    "text": "Loading relevant libraries\n\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(tidytext)\nlibrary(devtools)\nlibrary(ggwordcloud)\nlibrary(png)\nlibrary(svglite)\nlibrary(showtext)\nlibrary(sysfonts)"
  },
  {
    "objectID": "tidytuesday/shakespeare_words.html#importation-of-the-data",
    "href": "tidytuesday/shakespeare_words.html#importation-of-the-data",
    "title": "Creating a Word Map With Custom Shapes",
    "section": "Importation of the data",
    "text": "Importation of the data\n\nromeo_juliet &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-17/romeo_juliet.csv')\n\n\nData Wrangling\nFilter the data-set for only the characters Romeo and Juliet.\n\nromeo_juliet &lt;- romeo_juliet |&gt;  \n  filter(character %in% c(\"Romeo\",\"Juliet\")) \n\nMaking a list of the words that we are not interested in.\n\n# Create a custom list of words to exclude\ncustom_stop_words &lt;- c(\"thou\", \"thy\", \"thee\", \"thine\", \"art\", \"hast\", \"dost\", \"ere\", \"o\",\"hath\")\n\nMake a simple data set that has a column of the character, the word spoke, and the number of times it was spoken.\n\nword_counts &lt;- romeo_juliet |&gt; \n  unnest_tokens(word, dialogue) |&gt; \n  anti_join(stop_words) |&gt;   # Remove common stop words\n  filter(!str_detect(word, \"^[0-9]+$\")) |&gt;   # Remove numbers\n  filter(!word %in% custom_stop_words) |&gt;   # Remove custom words\n  mutate(word = stringr::str_replace(word, \"'s\", \"\")) |&gt; \n  count(character, word, sort = TRUE)\n\nword_counts\n\n# A tibble: 1,941 × 3\n   character word       n\n   &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt;\n 1 Romeo     love      52\n 2 Juliet    romeo     41\n 3 Juliet    love      35\n 4 Juliet    night     30\n 5 Romeo     death     22\n 6 Juliet    nurse     20\n 7 Romeo     juliet    17\n 8 Juliet    sweet     16\n 9 Romeo     fair      15\n10 Romeo     night     15\n# ℹ 1,931 more rows\n\n\nCreating a dataset for each character\n\njuliet &lt;- word_counts |&gt; \n  filter(character == \"Juliet\")\n\nromeo &lt;- word_counts |&gt; \n  filter(character == \"Romeo\")\n\n\n\nAttempt At Importing Fonts\nImporting a custom font (has not been able to work yet)\n\nsysfonts::font_add_google(\"MedievalSharp\", \"MedievalSharp\")\nshowtext::showtext_auto()\n\nmy_font &lt;- \"MedievalSharp\""
  },
  {
    "objectID": "tidytuesday/imo.html",
    "href": "tidytuesday/imo.html",
    "title": "Creating a Word Map With Custom Shapes",
    "section": "",
    "text": "library(tidyverse)\nlibrary(gganimate)\nlibrary(maps)\n\n\ncountry_results_df &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-24/country_results_df.csv')\nindividual_results_df &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-24/individual_results_df.csv')\n#timeline_df &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-24/timeline_df.csv')\n\nIn 2024, there were 609 people competing from 109 different countries.\n\nindiv_country &lt;- individual_results_df |&gt; \n  mutate(country2 = ifelse(str_detect(country, \"C[0-9]\"), \"Russia\", country)) \n\nindiv_country |&gt; \n  filter(year == 2024) |&gt; \n  summarise(distinct_countries = n_distinct(country2), n_countries = n())\n\n# A tibble: 1 × 2\n  distinct_countries n_countries\n               &lt;int&gt;       &lt;int&gt;\n1                109         609\n\n\n\nindiv_country &lt;- indiv_country |&gt; \n  group_by(country2, year) |&gt; \n  arrange(individual_rank) |&gt; \n  slice_head(n = 1) |&gt; \n  arrange(desc(year)) |&gt; \n  select(year, country2, individual_rank, award) |&gt; \n  mutate(country3 = case_when(\n    country2 == \"United States of America\" ~ \"USA\",\n    country2 == \"People's Republic of China\" ~ \"China\",\n    country2 == \"Türkiye\" ~ \"Turkey\",\n    country2 == \"Islamic Republic of Iran\" ~ \"Iran\",\n    country2 == \"Republic of Korea\" ~ \"South Korea\",\n    country2 == \"Islamic Republic of Iran\" ~ \"Iran\",\n    country2 == \"Turkish Republic of Northern Cyprus\" ~ \"Cyprus\",\n    country2 == \"Democratic People's Republic of Korea\" ~ \"North Korea\",\n    country2 == \"United Kingdom\" ~ \"UK\",\n    TRUE ~ country2\n  )) |&gt; \n  mutate(award = as.factor(case_when(\n         str_detect(award, \"Gold\") ~ \"Gold\",\n         str_detect(award, \"Silver\") ~ \"Silver\",\n         str_detect(award, \"Bronze\") ~ \"Bronze\",\n         TRUE ~ NA))) |&gt; \n  mutate(award = fct_relevel(award, c(\"Gold\", \"Silver\", \"Bronze\")))\n\nindiv_country\n\n# A tibble: 3,781 × 5\n# Groups:   country2, year [3,781]\n    year country2   individual_rank award  country3  \n   &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt; &lt;fct&gt;  &lt;chr&gt;     \n 1  2024 Albania                252 Bronze Albania   \n 2  2024 Algeria                 47 Gold   Algeria   \n 3  2024 Argentina               82 Silver Argentina \n 4  2024 Armenia                182 Bronze Armenia   \n 5  2024 Australia               29 Gold   Australia \n 6  2024 Austria                 90 Silver Austria   \n 7  2024 Azerbaijan             252 Bronze Azerbaijan\n 8  2024 Bangladesh             216 Bronze Bangladesh\n 9  2024 Belarus                 11 Gold   Belarus   \n10  2024 Belgium                147 Silver Belgium   \n# ℹ 3,771 more rows\n\n\n\nworld_data &lt;- map_data(\"world\")\nworld_data |&gt;\n summarize(n_distinct(region))\n\n  n_distinct(region)\n1                252\n\nplot_imo &lt;- world_data |&gt; \n  left_join(indiv_country, by = c(\"region\" = \"country3\")) \n\nlibrary(gganimate) my_breaks &lt;- c(1, 10, 50, 200, 600)\nplot_imo |&gt; mutate(year = as.factor(year)) |&gt; #filter(year == 1979 | !is.na(individual_rank)) |&gt; filter(!is.na(individual_rank)) |&gt; ggplot(aes(x = long, y = lat, group = group)) + geom_polygon(data = world_data, aes(x = long, y = lat, group = group), color = “black”, fill = “white”) + geom_polygon(aes(fill = individual_rank, color = award)) + scale_fill_gradient(name = “best individual rank”, trans = “log”, low = “#71797E”, high = “#E6E6E6”, breaks = my_breaks, labels = my_breaks) + scale_color_manual(values = c(“#FFD700”, “#C0C0C0”, “#CE8946”), na.value=“black”, breaks = c(“Gold”, “Silver”, “Bronze”)) + gganimate::transition_states(year, state_length = 5, transition_length = 10) + labs(title = ‘Math Olympiad top scorer in {closest_state}’)"
  },
  {
    "objectID": "projects/the office/office_text_analysis.html",
    "href": "projects/the office/office_text_analysis.html",
    "title": "The Office - Mini Text Analysis Project",
    "section": "",
    "text": "Image from peacock website"
  },
  {
    "objectID": "projects/the office/office_text_analysis.html#loading-the-dataset",
    "href": "projects/the office/office_text_analysis.html#loading-the-dataset",
    "title": "The Office - Mini Text Analysis Project",
    "section": "Loading the Dataset",
    "text": "Loading the Dataset\nThe dataset comes from a Kaggle user Fabrizio Cominetti who acuried the data from scrapping officequotes.net. I downloaded the csv and loaded it into my directory for accsses.\n\noffice &lt;- read.csv(\"the-office_lines.csv\")\ncolnames(office)\n\n[1] \"X\"              \"Character\"      \"Line\"           \"Season\"        \n[5] \"Episode_Number\"\n\n\n\nDataset Manipulation For Graphing Character Mentions Overtime\nThis R chunk aims to create a dataset called main_4_mentions. First, a variable representing each character’s name is created, with a value of 1 if that character is mentioned in a line and 0 otherwise. The data is then grouped by episode and season, summarizing the mentions per episode. Next, the data is pivoted to create a variable called character and another variable called count, indicating how many times each character is mentioned. Additionally, a new variable called season_episode is created, which only contains values for the first episode of each season; this will serve as a marker for the start of each season in the ggplot.\n\nmain_4_mentions &lt;- office |&gt; \n  mutate(Jim = ifelse(str_detect(Line, \"(?i)jim\"), 1, 0)) |&gt; \n  mutate(Pam = ifelse(str_detect(Line, \"(?i)pam\"), 1, 0)) |&gt; \n  mutate(Michael = ifelse(str_detect(Line, \"(?i)michael\"), 1, 0)) |&gt; \n  mutate(Dwight = ifelse(str_detect(Line, \"(?i)dwight\"), 1, 0)) |&gt; \n  arrange(Season, Episode_Number) |&gt; \n  group_by(Season, Episode_Number) |&gt; \n  summarize(Jim = sum(Jim),\n            Pam = sum(Pam),\n            Michael = sum(Michael),\n            Dwight = sum(Dwight)) |&gt; \n  ungroup() |&gt; \n  mutate(season_episode_num = row_number()) |&gt; \n  mutate(season_episode = ifelse(Episode_Number == 1, Season, \"\")) |&gt; \n  select(Jim:season_episode) |&gt; \n  pivot_longer(cols = Jim:Dwight,\n               names_to = \"character\",\n               values_to = \"count\")\nmain_4_mentions\n\n# A tibble: 736 × 4\n   season_episode_num season_episode character count\n                &lt;int&gt; &lt;chr&gt;          &lt;chr&gt;     &lt;dbl&gt;\n 1                  1 \"1\"            Jim           7\n 2                  1 \"1\"            Pam          17\n 3                  1 \"1\"            Michael       7\n 4                  1 \"1\"            Dwight        8\n 5                  2 \"\"             Jim           6\n 6                  2 \"\"             Pam           4\n 7                  2 \"\"             Michael      15\n 8                  2 \"\"             Dwight       10\n 9                  3 \"\"             Jim          17\n10                  3 \"\"             Pam          10\n# ℹ 726 more rows\n\n\nI am identifying the season_episode_num where a new season begins to add vertical lines on the graph, enhancing its visualization.\n\nvline_positions &lt;- main_4_mentions |&gt; \n  filter(season_episode != \"\") |&gt; \n  distinct(season_episode_num) |&gt; \n  pull()\nprint(vline_positions)\n\n[1]   1   7  29  52  65  90 114 138 162"
  },
  {
    "objectID": "projects/the office/office_text_analysis.html#graph-of-the-main-four-characters-overtime",
    "href": "projects/the office/office_text_analysis.html#graph-of-the-main-four-characters-overtime",
    "title": "The Office - Mini Text Analysis Project",
    "section": "Graph of the main four characters overtime",
    "text": "Graph of the main four characters overtime\nThe data is now plotted using the geom_smooth function, which captures the general patterns over the episodes and seasons. We find that Michael is the most mentioned character until the later seasons. Mentions of Jim remain relatively stable over time, while mentions of Pam and Dwight decline around seasons 5 and 6 before starting to trend upward.\n\nmain_4_mentions |&gt; \n  ggplot(aes(x = season_episode_num, y = count, color = character)) +\n  geom_smooth(se = FALSE) +\n  labs(x = \"Season\",\n       y = \"Mentions\",\n       color = \"Character\",\n       title = 'Mentions Of Main Characters in \"The Office\" Across the Seasons') +\n  scale_x_continuous( breaks = main_4_mentions$season_episode_num,\n                      labels = main_4_mentions$season_episode) +\n  scale_color_manual(values = c(\"Pam\" = \"#FF6F61\",\n                                \"Jim\" = \"#007B7F\",\n                                \"Dwight\" = \"#7D3C98\",\n                                \"Michael\" = \"#DAA520\")) +\n  geom_vline(xintercept = vline_positions, color = \"black\", alpha = 0.2, linetype = \"solid\") +\n  theme_minimal() +\n  theme(panel.grid = element_blank())"
  },
  {
    "objectID": "projects/the office/office_text_analysis.html#creating-a-plot-of-most-on-task-office-characters",
    "href": "projects/the office/office_text_analysis.html#creating-a-plot-of-most-on-task-office-characters",
    "title": "The Office - Mini Text Analysis Project",
    "section": "Creating a plot of most “on task” Office Characters",
    "text": "Creating a plot of most “on task” Office Characters\n\nData manipulation\nThe goal of this first R chunk is to create two objects: the first, main_characters, will contain the names of the 15 main characters from the show, and the second will be a regular expression used to identify work-related lines. The work-related phrases were generated by ChatGPT.\n\nmain_characters &lt;- c(\"Michael\", \"Jim\", \"Pam\", \"Dwight\", \"Ryan\", \"Angela\", \n                \"Andy\", \"Stanley\", \"Phyllis\", \"Kelly\", \"Toby\", \n                \"Kevin\", \"Oscar\", \"Creed\", \"Meredith\")\n\nontask_regular_expression &lt;- \"(?i)(Sales call|Close the deal|Client meeting|Team building|Sales quota|Dunder Mifflin|Paper company|File|Report|Workplace safety|Expense report|Business trip|Client relations|Company policy|Human resources|Submit a proposal|Meet the deadline|Job performance|Close a sale|Office supplies|Sales pitch|Productivity report|Employee evaluation|Quarterly review|Manager meeting|Sales team|Sales numbers|Work email|Conference call|Work-life balance|Overtime|Office hours|Weekly meeting|Promotion|Sales report|Job interview|Submit the paperwork|Company-wide memo|Business strategy|Client presentation|Office party|Budget meeting|New hire|Work project|Revenue target|Annual review|Management decision|Employee training|Company retreat|Work performance|quarterlies|corporate|efficien|fax)\"\n\nI filtered the office dataset using the main_characters object and created variables called proportion and percentages. These represent the proportion of lines identified as containing work-related phrases.\n\nontask &lt;- office |&gt; \n  filter(Character %in% main_characters) |&gt; \n  mutate(on_task = case_when(\n    str_detect(Line, ontask_regular_expression) ~ 1,\n    TRUE ~ 0)) |&gt; \n  group_by(Character) |&gt; \n  summarise(prop = sum(on_task)/n()) |&gt; \n  mutate(percentage = prop * 100)\nhead(ontask)\n\n# A tibble: 6 × 3\n  Character    prop percentage\n  &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n1 Andy      0.0127       1.27 \n2 Angela    0.00835      0.835\n3 Creed     0.0113       1.13 \n4 Dwight    0.0156       1.56 \n5 Jim       0.00825      0.825\n6 Kelly     0.00654      0.654\n\n\n\n\nCreating a custom color palette (experimental)\nI asked ChatGPT to create a custom color palette for the characters of The Office. The colors are intended to capture each character’s “essence” for plotting purposes.\n\npalette &lt;- c(\"Michael\" = \"#7FB3D5\", \"Jim\" = \"#8B8B8B\", \"Pam\" = \"#FF8DAA\", \n             \"Dwight\" = \"#FFD700\", \"Ryan\" = \"#28A745\", \"Angela\" = \"#5B2C6F\", \n             \"Andy\" = \"#FF6F61\", \"Stanley\" = \"#5C3A1D\", \"Phyllis\" = \"#A0522D\", \n             \"Kelly\" = \"#FF1493\", \"Toby\" = \"#4A90E2\", \"Kevin\" = \"#FFA500\", \n             \"Oscar\" = \"#1E4D2B\", \"Creed\" = \"#C0C0C0\", \"Meredith\" = \"#A50000\")"
  },
  {
    "objectID": "projects/the office/office_text_analysis.html#section",
    "href": "projects/the office/office_text_analysis.html#section",
    "title": "The Office - Text Analysis Project",
    "section": "",
    "text": "ontask |&gt; \n  ggplot(aes(x = reorder(Character, prop), y = prop, fill = Character)) +\n  geom_col(show.legend = FALSE) +\n  coord_flip() +\n  scale_fill_manual(values = palette) +\n  theme_minimal() +\n  labs(y = \"Percentage\",\n       x = \"Character\",\n       title = \"Percentage of Work Related Lines By Character From 'The Office'\")"
  },
  {
    "objectID": "projects/the office/office_text_analysis.html#plotting",
    "href": "projects/the office/office_text_analysis.html#plotting",
    "title": "The Office - Mini Text Analysis Project",
    "section": "Plotting",
    "text": "Plotting\nI created a graph showing the percentage of “work-related” lines by office character. Toby has the most work-related lines, with a score of 0.9% higher than Dwight, who comes in second. Kevin has the fewest work-related lines. The percentages displayed on the graph are rounded to the nearest tenth, while the bar lengths represent the exact proportions. This explains why, for example, Stanley and Meredith have the same percentage label but different bar lengths.\n\nontask |&gt; \n  ggplot(aes(x = reorder(Character, prop), y = prop, fill = Character)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = paste0(round(percentage, 1), \"%\")), \n            vjust = 0.5, \n            hjust = 1.05,\n            size = 5,\n            color = \"white\",\n            fontface = \"bold\") +\n  scale_fill_manual(values = palette) +\n  labs(y = \"Percentage Work Related\",\n       x = \"Character\",\n       title = \"Percentage of Work Related Lines By Character From 'The Office'\") +\n  theme_minimal() +\n  theme(axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        plot.title = element_text(hjust = 0.6)) +\n  coord_flip()"
  },
  {
    "objectID": "projects/the office/office_text_analysis.html#analyzing-which-character-has-the-longest-average-lines",
    "href": "projects/the office/office_text_analysis.html#analyzing-which-character-has-the-longest-average-lines",
    "title": "The Office - Mini Text Analysis Project",
    "section": "Analyzing which character has the longest average lines",
    "text": "Analyzing which character has the longest average lines\n\nData preparation\nI will use the same 15 key characters from the previous analysis. I’ll create a variable called avg_line to represent the average length of a line. To count the words per line, I will apply a regular expression. Finally, I will summarize the dataset.\n\navg_line_length &lt;- office |&gt; \n  filter(Character %in% main_characters) |&gt; \n  mutate(word_count = str_count(Line, \"\\\\w+\")) |&gt; \n  group_by(Character) |&gt; \n  summarize(avg_line = mean(word_count)) |&gt; \n  arrange(desc(avg_line))\n  \navg_line_length\n\n# A tibble: 15 × 2\n   Character avg_line\n   &lt;chr&gt;        &lt;dbl&gt;\n 1 Michael      15.3 \n 2 Andy         13.5 \n 3 Dwight       12.6 \n 4 Kelly        12.1 \n 5 Creed        11.4 \n 6 Ryan         11.0 \n 7 Toby         10.9 \n 8 Jim          10.4 \n 9 Pam          10.0 \n10 Angela        9.90\n11 Oscar         9.87\n12 Stanley       9.68\n13 Kevin         9.44\n14 Meredith      9.24\n15 Phyllis       9.00"
  },
  {
    "objectID": "projects/the office/office_text_analysis.html#plotting-of-average-amount-of-words-in-a-line",
    "href": "projects/the office/office_text_analysis.html#plotting-of-average-amount-of-words-in-a-line",
    "title": "The Office - Mini Text Analysis Project",
    "section": "Plotting of average amount of words in a line",
    "text": "Plotting of average amount of words in a line\nThis graph illustrates the average number of words per character’s line, highlighting which characters dominate conversations and which tend to be interrupted mid-thought. However, shorter lines may simply indicate they have less to say. Michael has the longest lines, followed by Andy and Dwight, while Phyllis and Meredith, the two female characters, have the shortest lines.\n\navg_line_length |&gt; \n  ggplot(aes(x = reorder(Character, avg_line), y = avg_line, fill = Character)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = paste0(round(avg_line, 1))), \n            vjust = 0.5, \n            hjust = 1.11,\n            size = 5,\n            color = \"white\",\n            fontface = \"bold\") +\n  scale_fill_manual(values = palette) +\n  labs(y = \"Average Word Count\",\n       x = \"Character\",\n       title = \"Average Count of Words in a Character's Line\") +\n  theme_minimal() +\n  theme(axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        plot.title = element_text(hjust = 0.5)) +\n  coord_flip()"
  },
  {
    "objectID": "practice/ggplot_practice.html#data",
    "href": "practice/ggplot_practice.html#data",
    "title": "ggplot Practice For Review",
    "section": "Data",
    "text": "Data\nThis data will be used in one of my projects analyzing MORENA’s rise to power. I compiled the data from IPU (Global data on national parliaments). We will only make a graph for the 2024 composition but a more in depth analysis will be a part of my project under development.\n\n\n\n\n\n\nNote\n\n\n\nThe party name must be under a variable named party and the number of seats in seats.\n\n\n\ndep_2024 &lt;- read.csv(\"deputies.csv\") |&gt; \n  mutate(party = factor(party, levels = party_order)) |&gt; \n  arrange(party) |&gt; \n  filter(year == 2024) |&gt; \n  rename(seats = elected) |&gt; \n  select(-year)\n\nhead(dep_2024)\n\n                                    party seats\n1 National Regeneration Movement (MORENA)   236\n2  Ecologist Green Party of Mexico (PVEM)    77\n3                        Labor Party (PT)    51\n4                 Citizens' Movement (MC)    27\n5                           Other Parties     1\n6 Institutional Revolutionary Party (PRI)    35"
  },
  {
    "objectID": "practice/ggplot_practice.html#creating-the-ggparliament-data-strcutre",
    "href": "practice/ggplot_practice.html#creating-the-ggparliament-data-strcutre",
    "title": "ggplot Practice For Review",
    "section": "Creating the ggparliament data strcutre",
    "text": "Creating the ggparliament data strcutre\nThis step is essential to be able to use ggpalriament in ggplot. The data structure must be changed in the following manner.\n\n# Use ggparliament's data structure to prepare the parliament plot\nmex_par_data &lt;- parliament_data(\n  election_data = dep_2024,\n  type = \"semicircle\",  # This sets the semicircular layout\n  parl_rows = 10        # Number of rows in the semicircle (adjust this based on number of seats)\n)\n\nIn the graph, shades of red represent the ‘Sigamos Haciendo Historia’ coalition, shades of blue represent the ‘Fuerza y Corazón por México’ coalition, orange represents the Movimiento Ciudadano party, and the purple circle represents other parties.\n\n# The above fig dimensions were changed to avoid narrowing of the graph\nmex_par_data |&gt; \n# Plot the semicircular parliament chart\n  ggplot(aes(x = x, y = y, colour = party, fill = party)) +\n    geom_parliament_seats(size = 5.5) +  # Adjust based on how large you want the circles\n    scale_colour_manual(values = party_colors) +  # Border colors\n    theme_void() +  # Remove axis and background\n    theme(legend.position = \"null\") + # Position cna be changed to bottom, right, etc...\n    labs(title = \"Deptuies Elected in the 2025 Mexican Election by Party\")"
  },
  {
    "objectID": "projects/amlo_mex/UntitledQMD.html",
    "href": "projects/amlo_mex/UntitledQMD.html",
    "title": "Kevin Valdivia",
    "section": "",
    "text": "# Libraries used\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggparliament)\nlibrary(gganimate)\n\n# Define party order and colors\nparty_order &lt;- c(\n  \"PT\",      # Far-left\n  \"MORENA\",  # Left\n  \"VERDE\",   # Center-left\n  \"MC\",      # Center to Center-left\n  \"PRD\",     # Center-left\n  \"PRI\",     # Center-right\n  \"PAN\",     # Right\n  \"PES\",     # Far-right\n  \"Other_Parties\" # Other/Unknown\n)\n\nparty_colors &lt;- c(\n  PT = \"#f02b19\",           # Red\n  MORENA = \"#b5261f\",       # Dark Red\n  VERDE = \"#38a700\",        # Green\n  MC = \"#f57c00\",           # Orange\n  PRD = \"#ffcc00\",          # Yellow\n  PRI = \"#006847\",          # Green (plus Red/White in their logo)\n  PAN = \"#004a98\",          # Blue\n  PES = \"#5c246e\",          # Purple\n  Other_Parties = \"#b2b2b2\" # Grey for other/unknown parties\n)\n\n# Load data and preprocess\ndeputies &lt;- read.csv(\"deputies_00_24.csv\") %&gt;%\n  mutate(party = factor(party, levels = party_order)) %&gt;%\n  arrange(party) %&gt;%\n  rename(seats = elected)\n\n# Create a function to prepare data for each year\nprepare_parliament_data &lt;- function(year_data) {\n  parliament_data(\n    election_data = year_data,\n    type = \"semicircle\",  # This sets the semicircular layout\n    parl_rows = 10        # Number of rows in the semicircle\n  )\n}\n\n# Specify a custom temporary directory\ntemp_dir &lt;- tempdir()\n\n# Create animated parliament plot\ngif &lt;- deputies %&gt;%\n  group_by(year) %&gt;%                # Group data by year\n  nest() %&gt;%                       # Nest the data for each year\n  mutate(par_data = map(data, prepare_parliament_data)) %&gt;% # Prepare parliament data\n  unnest(par_data) %&gt;%             # Unnest the data for plotting\n  ggplot(aes(x = x, y = y)) +\n  geom_parliament_seats(size = 6, aes(color = party)) + \n  scale_colour_manual(values = party_colors) + \n  theme_void() + \n  theme(legend.position = \"null\") +\n  labs(title = \"Deputies Elected in the Mexican Election by Party ({frame_time})\") +\n  transition_time(year)          # Use the 'year' column for animation              # Smooth transition between frames\ngif\n\n\n\n\n\n\n\n# Render the animation to the temporary directory\n# animate(animated_plot, renderer = gifski_renderer(temp_dir))"
  },
  {
    "objectID": "tidytuesday/animal_parks.html",
    "href": "tidytuesday/animal_parks.html",
    "title": "Biodiverisity in West Coast National Parks",
    "section": "",
    "text": "Waffle was used to create the waffle graph.\n\nlibrary(tidyverse)\nlibrary(waffle)"
  },
  {
    "objectID": "tidytuesday/animal_parks.html#plotting",
    "href": "tidytuesday/animal_parks.html#plotting",
    "title": "Biodiverisity in West Coast National Parks",
    "section": "Plotting",
    "text": "Plotting\nI plot a waffle chart that shows the biodiversity of biological groups amoung the three west coast naitonal parks in the dataset.\n\nwc_species |&gt; \n  mutate(ParkName = str_extract(ParkName, \".*(?= National Park)\")) |&gt; \n  ggplot(aes(fill = CategoryName, values = n)) +\n  geom_waffle(color = \"white\", size=0.25, n_rows = 10, flip = TRUE) +\n  facet_wrap(~ParkName, strip.position = \"bottom\") +\n  scale_x_discrete() +\n  scale_y_continuous(label = function(x) x * 100, \n                    expand = c(0,0)) +\n  coord_equal() +\n  theme_minimal() +\ntheme(\n    panel.grid = element_blank(), \n    axis.ticks.y = element_line()\n    #strip.text = element_text(face = \"bold\")  # Make facet labels bold\n  ) +\n  guides(fill = guide_legend(reverse = TRUE)) +\n  scale_fill_manual(values = custom_palette) +\n  labs(fill = \"Biological Group\",\n       title = \"Biodiversity in West Coast National Parks\",\n       subtitle = \"Each Square Represents 10 Species by Biological Category\")"
  },
  {
    "objectID": "tidytuesday/biodiversity_national_parks.html",
    "href": "tidytuesday/biodiversity_national_parks.html",
    "title": "Biodiverisity in West Coast National Parks",
    "section": "",
    "text": "Under the mentorship of Professor Jo Hardin @hardin47 at Pomona College."
  },
  {
    "objectID": "tidytuesday/biodiversity_national_parks.html#plotting",
    "href": "tidytuesday/biodiversity_national_parks.html#plotting",
    "title": "Biodiverisity in West Coast National Parks",
    "section": "Plotting",
    "text": "Plotting\nI plot a waffle chart that shows the biodiversity of biological groups amoung the three west coast naitonal parks in the dataset.\n\nwc_species |&gt; \n  mutate(ParkName = str_extract(ParkName, \".*(?= National Park)\")) |&gt; \n  ggplot(aes(fill = CategoryName, values = n)) +\n  geom_waffle(color = \"white\", size=0.25, n_rows = 10, flip = TRUE) +\n  facet_wrap(~ParkName, strip.position = \"bottom\") +\n  scale_x_discrete() +\n  scale_y_continuous(label = function(x) x * 100, \n                    expand = c(0,0)) +\n  coord_equal() +\n  theme_minimal() +\ntheme(\n    panel.grid = element_blank(), \n    axis.ticks.y = element_line()\n    #strip.text = element_text(face = \"bold\")  # Make facet labels bold\n  ) +\n  guides(fill = guide_legend(reverse = TRUE)) +\n  scale_fill_manual(values = custom_palette) +\n  labs(fill = \"Biological Group\",\n       title = \"Biodiversity in West Coast National Parks\",\n       subtitle = \"Each Square Represents 10 Species by Biological Category\")"
  }
]