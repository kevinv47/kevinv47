{
  "hash": "cfbd735be4cee6b3aa35990a8be99409",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating a Word Map With Custom Shapes\"\nsubtitle: \"Dataset is About The Words Used in Shakespeare's Romeo & Juliet\"\ndate: \"Sep 17, 2024\"\nauthor: \"Kevin Valdivia\"\nformat: html\ntoc: false # Table of contents\nexecute: \n  warning: false\n  message: false\n---\n\n\n***Under the mentorship of Professor Jo Hardin [\\@hardin47](https://github.com/hardin47) at Pomona College. Analysis based on [\\@deepdk](https://github.com/deepdk/TidyTuesday2024/tree/main/2024/week_38)***\n\n## Loading relevant libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(tidytext)\nlibrary(devtools)\nlibrary(ggwordcloud)\nlibrary(png)\nlibrary(svglite)\nlibrary(showtext)\nlibrary(sysfonts)\n```\n:::\n\n\n## Importation of the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nromeo_juliet <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-17/romeo_juliet.csv')\n```\n:::\n\n\n### Data Wrangling\n\nFilter the data-set for only the characters Romeo and Juliet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nromeo_juliet <- romeo_juliet |>  \n  filter(character %in% c(\"Romeo\",\"Juliet\")) \n```\n:::\n\n\nMaking a list of the words that we are not interested in.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a custom list of words to exclude\ncustom_stop_words <- c(\"thou\", \"thy\", \"thee\", \"thine\", \"art\", \"hast\", \"dost\", \"ere\", \"o\",\"hath\")\n```\n:::\n\n\nMake a simple data set that has a column of the character, the word spoke, and the number of times it was spoken.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_counts <- romeo_juliet |> \n  unnest_tokens(word, dialogue) |> \n  anti_join(stop_words) |>   # Remove common stop words\n  filter(!str_detect(word, \"^[0-9]+$\")) |>   # Remove numbers\n  filter(!word %in% custom_stop_words) |>   # Remove custom words\n  mutate(word = stringr::str_replace(word, \"'s\", \"\")) |> \n  count(character, word, sort = TRUE)\n\nword_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,941 × 3\n   character word       n\n   <chr>     <chr>  <int>\n 1 Romeo     love      52\n 2 Juliet    romeo     41\n 3 Juliet    love      35\n 4 Juliet    night     30\n 5 Romeo     death     22\n 6 Juliet    nurse     20\n 7 Romeo     juliet    17\n 8 Juliet    sweet     16\n 9 Romeo     fair      15\n10 Romeo     night     15\n# ℹ 1,931 more rows\n```\n\n\n:::\n:::\n\n\nCreating a dataset for each character\n\n\n::: {.cell}\n\n```{.r .cell-code}\njuliet <- word_counts |> \n  filter(character == \"Juliet\")\n\nromeo <- word_counts |> \n  filter(character == \"Romeo\")\n```\n:::\n\n\n### Attempt At Importing Fonts\n\nImporting a custom font (has not been able to work yet)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsysfonts::font_add_google(\"MedievalSharp\", \"MedievalSharp\")\nshowtext::showtext_auto()\n\nmy_font <- \"MedievalSharp\"\n```\n:::\n\n\n# Creating The Word Maps\n\nWord maps of the most common words in Romeo and Juliet's lines.\n\n::: columns\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nromeo |> \n  ggplot(aes(label = word, size = n, color = n)) +\n  # The following code can be run without the rest to make a simple word cloud\n  # ggwordcloud::geom_text_wordcloud(rm_outside = TURE, shape = \"circle\") \n  ggwordcloud::geom_text_wordcloud_area(\n    mask = png::readPNG(\"media/romeo.png\"),\n    rm_outside = TRUE,\n    ) +\n  scale_size_area(max_size = 20) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#1c63d6\", high = \"#5006bf\")\n```\n\n::: {.cell-output-display}\n![](shakespeare_words_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\njuliet |> \n  ggplot(aes(label = word, size = n, color = n)) +\n  ggwordcloud::geom_text_wordcloud_area(\n    mask = png::readPNG(\"media/juliet.png\"),\n    rm_outside = TRUE\n  # Couldn't get the custom font to work yet\n  # family = my_font   \n    ) +\n  scale_size_area(max_size = 20) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#c41cd6\", high = \"#5006bf\")\n```\n\n::: {.cell-output-display}\n![](shakespeare_words_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n:::\n:::\n",
    "supporting": [
      "shakespeare_words_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}